---
name: Continuous Integration
on:
  workflow_dispatch:
    inputs:
      terraform_folder:
        description: 'Terraform configuration folder'
        required: true
        type: string
        default: 'none'
      environment_name:
        description: 'Environment that will be deployed'
        required: true
        type: choice
        options:
          - dev
          - prod
          - staging

jobs:
  validate:
    name: Validate Terraform
    runs-on:
      self-hosted
    environment: ${{ inputs.environment_name }}
    permissions:
      # NOTE: When modifying the token subject claims and adding `environment`.
      # If the `id-token` permission is granted at the workflow level
      # and the workflow has at least one job that does not specify an environment
      # then the action will fail with an internal error.
      id-token: write
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: "${{ vars.AZURE_CLIENT_ID_GH_LEARN }}"
      ARM_SUBSCRIPTION_ID: "${{ vars.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ vars.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
    
    steps:
      - name: Show current directory
        run: |
          pwd
      
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Show content
        run: |
          ls -l

      - name: Check Path
        run: |
          if [ -d "./${{ github.event.inputs.terraform_folder }}" ]; then
            echo "Path /${{ github.event.inputs.terraform_folder }} exist"
          else
            echo "!!! Path /${{ github.event.inputs.terraform_folder }} does not exist !!!"
            echo "Please use one of the following subfolders as path:"
            ls -l
            exit 1
          fi

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID_GH_LEARN }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      
      - name: Az Context
        run: |
          az account show
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: "1.9.6"

      - name: Terraform Init
        run: |
          cd ${{ github.event.inputs.terraform_folder }}
          terraform \
          init \
          -backend-config="resource_group_name=${{vars.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{ github.event.inputs.terraform_folder }}" \
          -backend-config="key=terraform.tfstate"

      - name: Terraform Validate
        run: |
          terraform \
          -chdir="${{github.event.inputs.terraform_folder}}" \
          validate

  plan:
    name: Validate Terraform Plan
    needs: validate
    runs-on:
      self-hosted
    #concurrency: ${backend_azure_storage_account_container_name}
    environment: ${{ inputs.environment_name }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: "${{ vars.AZURE_CLIENT_ID_GH_LEARN }}"
      ARM_SUBSCRIPTION_ID: "${{ vars.AZURE_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ vars.AZURE_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: "1.9.6"

      - name: Terraform Init
        run: |
          terraform \
          -chdir="${{github.event.inputs.terraform_folder}}" \
          init \
          -backend-config="resource_group_name=${{vars.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
          -backend-config="storage_account_name=${{vars.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=${{ github.event.inputs.terraform_folder }}" \
          -backend-config="key=terraform.tfstate"

      - name: Terraform Plan
        id: plan
        run: |
          terraform \
          -chdir="${{ github.event.inputs.terraform_folder }}" \
          plan \
          -input=false

      - name: Update Pull Request
        if: (success() || failure()) && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: $${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`$${{ steps.plan.outcome }}\`

            <details><summary>Run details</summary>

            The plan was a $${{ steps.plan.outcome }} see the action for more details.

            </details>

            *Pushed by: @$${{ github.actor }}, Action: \`$${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
